.modal {
  position: absolute;
  top: 50%;
  left: 50%;
  width: $popup-width-small;
  height: 100%;
  max-width: 100%;
  transform: translate(-50%, -50%) scale(0.5);
  pointer-events: none;
  opacity: 0;
  z-index: 60;

  @include respond(large) {
    position: fixed;
    width: $popup-width-large;
    height: 60rem;
  }

  &--grid {
    width: 100%;
    height: 100%;
    overflow: auto;

    @include absolute-pos;
    @include respond(large) {
      grid-template-areas:
        'img1 header header'
        'img2 text1 text2'
        '. btn .';
    }
  }

  &--grid-closed {
    display: none;
  }

  &__image--1 {
    @include respond(large) {
      grid-area: img1;
    }
  }

  &__image--2 {
    display: none;

    @include respond(large) {
      display: initial;
      grid-area: img2;
    }
  }

  &__heading {
    @include respond(large) {
      grid-area: header;
    }
  }

  &__heading > h2 {
    @include respond(large) {
      margin-top: 5rem;
    }
  }

  &__info--1 {
    @include respond(large) {
      grid-area: text1;
    }
  }

  &__info--2 {
    @include respond(large) {
      grid-area: text2;
    }
  }

  &__link {
    justify-self: center;
    align-self: center;
    width: 40%;

    @include respond(large) {
      grid-area: btn;
    }
  }

  &__overlay {
    position: fixed;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    background-color: rgba($color-black, 0.8);
    transform: scale(0.5);
    pointer-events: none;
    opacity: 0;
    z-index: 55;
  }

  //Open states
  &__close {
    &:link,
    &:visited {
      position: absolute;
      top: 1rem;
      right: 1rem;
      display: inline-block;
      z-index: 65;
    }
  }
}

#modal {
  &:target.modal {
    transform: translate(-50%, -50%) scale(1);
    transition: transform 0.5s ease, opacity 0.5s ease;
    pointer-events: auto;
    opacity: 1;

    .modal--grid {
      @include grid-1col;
      @include respond(large) {
        grid-template-columns: 30rem 1fr 1fr;
      }

      grid-gap: 1rem 3rem;
    }
  }

  &:target ~ .modal__overlay {
    transform: scale(1);
    transition: transform 0.5s ease, opacity 0.5s ease;
    pointer-events: auto;
    opacity: 1;
  }
}
